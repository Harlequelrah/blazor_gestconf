@page "/Account/Register/{role}"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using blazor_gestconf.Data
@using blazor_gestconf.Services
@inject EntrepriseService EntrepriseService
@inject UniversiteService UniversiteService

@inject UserManager<Utilisateur> UserManager
@inject IUserStore<Utilisateur> UserStore
@inject SignInManager<Utilisateur> SignInManager
@inject IEmailSender<Utilisateur> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new @Input.Role account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            @if (Input.Role == "Auteur")
{
    <div class="form-floating mb-3">
        <InputSelect @bind-Value="Input.UniversiteId" class="form-control">
            <option value="">Select University</option>
            @foreach (var universite in ListUniversites)
            {
                <option value="@universite.Id">@universite.Nom</option>
            }
        </InputSelect>
        <label for="universite">Université</label>
        <ValidationMessage For="() => Input.UniversiteId" class="text-danger" />
    </div>

    <div class="form-floating mb-3">
        <InputSelect @bind-Value="Input.EntrepriseId" class="form-control">
            <option value="">Select Company</option>
            @foreach (var entreprise in ListEntreprises)
            {
                <option value="@entreprise.Id">@entreprise.Nom</option>
            }
        </InputSelect>
        <label for="entreprise">Entreprise</label>
        <ValidationMessage For="() => Input.EntrepriseId" class="text-danger" />
    </div>
}

            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private List<Entreprise> ListEntreprises = new List<Entreprise>();
    private List<Universite> ListUniversites = new List<Universite>();
    [Parameter]
    public string Role { get; set; } = "User";

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task  OnInitializedAsync()
    {
        Input.Role = Role;
        ListEntreprises = await EntrepriseService.GetAllAsync();
        ListUniversites = await UniversiteService.GetAllAsync();

    }

    public async Task RegisterUser(EditContext editContext)
{
    var user = CreateUser();
    await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
    var emailStore = GetEmailStore();
    await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

    if (Input.Role == "Auteur")
    {
        var auteur = user as Auteur;
        if (auteur != null)
        {
            auteur.UniversiteId = Input.UniversiteId ?? 0; // Assuming 0 is an invalid ID
            auteur.EntrepriseId = Input.EntrepriseId ?? 0; // Assuming 0 is an invalid ID
        }
    }

    var result = await UserManager.CreateAsync(user, Input.Password);
    if (!result.Succeeded)
    {
        identityErrors = result.Errors;
        return;
    }

    Logger.LogInformation("User created a new account with password.");

    if (!await UserManager.IsInRoleAsync(user, Input.Role))
    {
        var roleResult = await UserManager.AddToRoleAsync(user, Input.Role);
        if (!roleResult.Succeeded)
        {
            identityErrors = roleResult.Errors;
            return;
        }
    }

    var userId = await UserManager.GetUserIdAsync(user);
    var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

    await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

    if (UserManager.Options.SignIn.RequireConfirmedAccount)
    {
        RedirectManager.RedirectTo(
            "Account/RegisterConfirmation",
            new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
    }

    await SignInManager.SignInAsync(user, isPersistent: false);
    RedirectManager.RedirectTo(ReturnUrl);
}



    private Utilisateur CreateUser()
{
    string role=Input.Role;
    try
    {
        switch (role.ToLower())
        {
            case "participant":
                return new Participant();
            case "membrecomite":
                return new MembreComite();
            case "auteur":
                return new Auteur();
            case "administrateur":
                return new Administrateur();
            case "relecteur":
                return new Relecteur();
            default:
                return new Utilisateur();
        }
    }
    catch (Exception ex)
    {
        // Gérer l'exception ici (journalisation, notification, etc.)
        throw new InvalidOperationException($"Erreur lors de la création de l'utilisateur avec le rôle '{role}'.", ex);
    }
}

    private IUserEmailStore<Utilisateur> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<Utilisateur>)UserStore;
    }

    private sealed class InputModel
{
    [Required]
    [EmailAddress]
    [Display(Name = "Email")]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; } = "";

    [Required]
    [Display(Name = "Role")]
    public string Role { get; set; } = "Utilisateur"; // Default role

    [Display(Name = "Université")]
    public int? UniversiteId { get; set; } // Changed to int?

    [Display(Name = "Entreprise")]
    public int? EntrepriseId { get; set; } // Changed to int?

    public Universite Universite { get; set; }
    public Entreprise Entreprise { get; set; }
}

}
