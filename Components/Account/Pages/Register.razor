@page "/Account/Register/{role}"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using blazor_gestconf.Data

@inject UserManager<Utilisateur> UserManager
@inject IUserStore<Utilisateur> UserStore
@inject SignInManager<Utilisateur> SignInManager
@inject IEmailSender<Utilisateur> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            @if (Input.Role == "Auteur")
            {
                <div class="form-floating mb-3">
                    <select @bind="Input.Universite" class="form-control">
                        <option value="">Select University</option>
                        <option value="Université 1">Université 1</option>
                        <option value="Université 2">Université 2</option>
                        <!-- Add more options as needed -->
                    </select>
                    <label for="universite">Universite</label>
                    <ValidationMessage For="() => Input.Universite" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <select @bind="Input.Entreprise" class="form-control">
                        <option value="">Select Company</option>
                        <option value="Entreprise 1">Entreprise 1</option>
                        <option value="Entreprise 2">Entreprise 2</option>
                        <!-- Add more options as needed -->
                    </select>
                    <label for="entreprise">Entreprise</label>
                    <ValidationMessage For="() => Input.Entreprise" class="text-danger" />
                </div>
            }
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Role { get; set; } = "User";

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        Input.Role = Role;
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        // Assign the role to the user
        if (!await UserManager.IsInRoleAsync(user, Input.Role))
        {
            var roleResult = await UserManager.AddToRoleAsync(user, Input.Role);
            if (!roleResult.Succeeded)
            {
                identityErrors = roleResult.Errors;
                return;
            }
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));


        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private Utilisateur CreateUser()
{
    string role=Input.Role;
    try
    {
        switch (role.ToLower())
        {
            case "participant":
                return new Participant();
            case "membrecomite":
                return new MembreComite();
            case "auteur":
                var auteur = new Auteur
                {
                    Entreprise = Input.Entreprise,
                    Universite = Input.Universite
                };
                Console.WriteLine("stade 1");
                Console.WriteLine("Hello, auteur");
                Console.WriteLine($"{Input.Entreprise}");
                Console.WriteLine($"{auteur.Entreprise}");
                return auteur;
            case "administrateur":
                return new Administrateur();
            default:
                return new Utilisateur();
        }
    }
    catch (Exception ex)
    {
        // Gérer l'exception ici (journalisation, notification, etc.)
        throw new InvalidOperationException($"Erreur lors de la création de l'utilisateur avec le rôle '{role}'.", ex);
    }
}

    private IUserEmailStore<Utilisateur> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<Utilisateur>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Role")]
        public string Role { get; set; } = "Utilisateur"; // Default role
        public string? Discriminator { get; set; }
        public string? Universite { get; set; }
        public string? Entreprise { get; set; }
    }
}
