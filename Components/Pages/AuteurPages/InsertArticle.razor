@page "/add/Article"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using blazor_gestconf.Models
@using blazor_gestconf.Services
@inject UserManager<Utilisateur> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@inject ArticleService articleCrud
<<<<<<< HEAD
<h3>Ajouter un Article</h3>
=======
@inject ArticleAuteurService ArtAutService
<h3>InsertArticle</h3>
>>>>>>> origin/maxime
<EditForm Model="Art" method="Post" OnValidSubmit="Inserer">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="title" class="form-label">Titre :</label>
        <InputText @bind-Value="Art.Titre" class="form-control" id="title"></InputText>
        <ValidationMessage For="@(()=>Art.Titre)" />
    </div>
    <div class="mb-3">
        <label for="description" class="form-label">Description :</label>
        <InputText @bind-Value="Art.Description" class="form-control" id="description"></InputText>
        <ValidationMessage For="@(()=>Art.Description)" />
    </div>
    <div class="mb-3">
        <label for="file" class="form-label">Fichier(pdf) :</label>
        <InputFile OnChange="HandleFileSelected" @bind-Value="Art.FichierPdf" class="form-control" id="file"></InputFile>
        <ValidationMessage For="@(()=>Art.FichierPdf)" />
    </div>
    <div class="mb-3">
        <button type="submit" class="btn-dark">Enrégistrer</button>
    </div>
</EditForm>

@if (showConfirmation)
{
    <ModalSave Title="Confirmation" OnClose="CloseConfirmation">
        <p>L'Article a été bien enrégistrée.</p>
    </ModalSave>
}

@code {
    [SupplyParameterFromForm]
    public Article Art { get; set; } = new Article();
    [SupplyParameterFromQuery]
    public int id { get; set; }
    public bool showConfirmation { get; set; } = false;

    public ArticleAuteur articleauteur = new ArticleAuteur();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userid = UserManager.GetUserId(user);
        int userId=int.Parse(userid);
        articleauteur.AuteurId=userId;



    }


    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            Art.FichierPdf = ms.ToArray();
        }
    }

    public async Task Inserer()
    {
        Art.ConferenceId = id;
        bool ex = await articleCrud.AddAsync(Art);

        if (ex)
        {
            Art = new Article();

            int Artid = await articleCrud.GetLastInsertedId();
            articleauteur.ArticleId=Artid;
            bool ex2 = await ArtAutService.AddAsync(articleauteur);
            if (ex2){
                showConfirmation = true;
                articleauteur = new ArticleAuteur();
            }

        }
    }
    private void CloseConfirmation()
    {
        showConfirmation = false;
    }
}
