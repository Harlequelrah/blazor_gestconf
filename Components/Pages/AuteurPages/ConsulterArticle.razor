@page "/consulter/article/{ArticleId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using blazor_gestconf.Models
@using blazor_gestconf.Services
@inject UserManager<Utilisateur> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ArticleService ArticleService
@attribute [Authorize(Roles = "Auteur,MembreComite")]
<h1>@article?.Titre</h1>
<h3>@article?.Description</h3>

<p> Statut Global : @article?.Statut ?? "Indisponible" </p>

@if (Relectures != null && Relectures.Any())
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Relecteur</th>
                <th>Avis</th>
                <th>Justification</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var r in Relectures)
            {
                <tr>
                    <td>@r.Relecteur?.UserName</td>
                    <td>@r.Avis</td>
                    <td>@r.Justification</td>
                    <AuthorizeView Policy="MembreComiteOnly">
                    <Authorized>
                    <td>
                        <a href="@($"/donneravis/article/{r.RelecteurId}/{r.ArticleId}")" class="btn btn-warning btn-sm mx-1" title="Evaluer">
                        <i class="bi bi-pencil-square"></i> Donner Avis et Justificatif
                        </a>
                    </td>
                </Authorized>
        </AuthorizeView>

                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Aucune relecture trouv√©e pour cet article.</p>
}

@code {
    private Article article;
    private List<Relecture> Relectures;

    [Parameter]
    public int ArticleId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        article = await ArticleService.GetByIdAsync(ArticleId);
        Relectures = article?.Relectures.ToList() ?? new List<Relecture>();
    }
}
