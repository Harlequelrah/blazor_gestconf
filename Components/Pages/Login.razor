@page "/login"

@using blazor_gestconf.Services

<style>
    body {
        background: linear-gradient(135deg, #563d7c, #ff8c42) fixed;
    }

    .card-container {
        max-width: 600px;
        width: 100%;
        transition: transform 0.3s ease-in-out; /* Ajoute une transition fluide */
    }

    .card-container:hover {
        transform: scale(1.05); /* Agrandit légèrement le conteneur au survol */
    }

    .form-group {
        margin-bottom: 15px;
    }

    /* Styles pour le bouton "Se connecter" */
    .btn-primary {
        background-color: #563d7c;
        border: none;
        transition: transform 0.3s ease-in-out; /* Ajoute une transition fluide */
    }

    /* Effet d'agrandissement au survol */
    .btn-primary:hover {
        transform: scale(1.1);
    }

    /* Styles pour les champs de texte */
    .form-control {
        transition: transform 0.3s ease-in-out, width 0.3s ease-in-out; /* Ajoute une transition fluide pour la largeur */
        width: calc(100% - 20px); /* Réduit légèrement la largeur des champs */
    }

    /* Effet d'agrandissement au survol des champs de texte */
    .form-control:hover {
        transform: scale(1.1);
    }
</style>


<div class="container d-flex justify-content-center align-items-center min-vh-100">
    <div class="card p-4 shadow-lg card-container">
        <div class="card-body">
            <h3 class="card-title text-center mb-4" style="color: #563d7c;">Connexion</h3>
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <div class="form-group">
                    <label for="username">Nom d'utilisateur</label>
                    <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                </div>

                <div class="form-group">
                    <label for="password">Mot de passe</label>
                    <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" />
                </div>

                <button type="submit" class="btn btn-primary btn-block">Se connecter</button>
            </EditForm>
        </div>
    </div>
</div>



@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    [Inject]
    private CustomAuthenticationStateProvider AuthStateProvider { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private void HandleLogin()
    {
        if (loginModel.Username == "testuser" && loginModel.Password == "password")
        {
            AuthStateProvider.MarkUserAsAuthenticated(loginModel.Username);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Nom d'utilisateur ou mot de passe incorrect.";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
