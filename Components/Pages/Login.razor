@page "/Identity/Account/Login"
@using System
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using blazor_gestconf.Services
@using blazor_gestconf.Models
@using blazor_gestconf.Data
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<style>
    body {
        background: linear-gradient(135deg, #563d7c, #ff8c42) fixed;
    }

    .card-container {
        max-width: 600px;
        width: 100%;
        transition: transform 0.3s ease-in-out;
    }

    .card-container:hover {
        transform: scale(1.05);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .btn-primary {
        background-color: #563d7c;
        border: none;
        transition: transform 0.3s ease-in-out;
    }

    .btn-primary:hover {
        transform: scale(1.1);
    }

    .form-control {
        transition: transform 0.3s ease-in-out, width 0.3s ease-in-out;
        width: calc(100% - 20px);
    }

    .form-control:hover {
        transform: scale(1.1);
    }
</style>

<div class="container d-flex justify-content-center align-items-center min-vh-100">
    <div class="card p-4 shadow-lg card-container">
        <div class="card-body">
            <h3 class="card-title text-center mb-4" style="color: #563d7c;">Connexion</h3>
            <form>
                <div class="input-group mb-3">
                    <span class="input-group-text" id="inputGroup-sizing-default">User</span>
                    <input type="text" class="form-control" @bind="loginModel.UserName" />
                </div>
                <div class="input-group mb-3">
                    <span class="input-group-text" id="inputGroup-sizing-default">Password</span>
                    <input type="Password" class="form-control" @bind="loginModel.PasswordHash" />
                </div>
                <button type="button" class="btn btn-danger" @onclick="HandleLogin">Se connecter</button>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
            </form>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;

    protected override void OnInitialized()
    {
        // Votre logique d'initialisation ici
    }

    private async Task HandleLogin()
    {
        // Validation des champs de connexion
        if (!Validator.TryValidateObject(loginModel, new ValidationContext(loginModel), null))
        {
            errorMessage = "Veuillez remplir tous les champs.";
            return;
        }

        // Vérification des informations d'identification dans la base de données
        var user = await DbContext.Users.SingleOrDefaultAsync(u => u.UserName == loginModel.UserName && u.PasswordHash == loginModel.PasswordHash);
        if (user != null)
        {
            Console.WriteLine("User");
            AuthStateProvider.SignInUserAsync(loginModel.UserName);
            NavigationManager.NavigateTo("/displayuser");
        }
        else
        {
            errorMessage = "Nom d'utilisateur ou mot de passe incorrect.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Le nom d'utilisateur est requis.")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Le mot de passe est requis.")]
        public string PasswordHash { get; set; }
    }
}
