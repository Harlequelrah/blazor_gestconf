@page "/evaluer/article/{ArticleId:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using blazor_gestconf.Models
@using blazor_gestconf.Services
@rendermode InteractiveServer
@inject UserManager<Utilisateur> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ArticleService ArticleService
@inject NavigationManager Navigation
@inject RelectureService RelectureService

<h1>@article?.Titre</h1>
<h3>@article?.Description</h3>

<EditForm Model="@Relecture" method="post" FormName="EditRelecture" OnValidSubmit="ModifierRelecture" Enhance>
    <DataAnnotationsValidator/>
    <ValidationSummary/>
<div class="mb-3">
    <label for="NoteForme" class="form-label">Note Forme :</label>
    <input type="number" class="form-control" @bind="Relecture.NoteForme" id="NoteForme" min="0" step="1" max="20" />
</div>
<div class="mb-3">
    <label for="NoteFond" class="form-label">Note Fond :</label>
    <input type="number" class="form-control" @bind="Relecture.NoteFond" id="NoteFond" min="0" step="1" max="20" />
</div>
<div class="mb-3">
    <label for="NotePertinenceScientifique" class="form-label"> Note Pertinence Scientifique :</label>
    <input type="number" class="form-control" @bind="Relecture.NotePertinenceScientifique" id="NotePertinenceScientifique" min="0" step="1" max="20" />
</div>

    <div class="mb-3">
        <button type="submit" class="btn btn-dark">Enr√©gistrer</button>
    </div>
</EditForm>

@code {
    private Article? article;
    [Parameter]
    public int ArticleId { get; set; }

    [SupplyParameterFromForm(FormName="EditRelecture")]
    public Relecture? Relecture { get; set; } = new Relecture();

    protected override async Task OnInitializedAsync()
    {
        article = await ArticleService.GetByIdAsync(ArticleId);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userid = UserManager.GetUserId(user);
        int userId = int.Parse(userid);
        Relecture = await RelectureService.GetByArticleAndRelecteurAsync(ArticleId,userId);
    }

    public async Task ModifierRelecture()
    {
        bool ex = await RelectureService.UpdateAsync(Relecture);
        if (ex)
        {
            Relecture = new Relecture();
        }
        Navigation.NavigateTo("show/article");
    }
}
