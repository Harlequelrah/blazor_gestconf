@page "/article"
@using blazor_gestconf.Models
@using blazor_gestconf.Services
@inject ArticleService ArticleService
@rendermode InteractiveServer

<h3>Ajouter</h3>
<form>
    <div class="input-group mb-3">
        <span class="input-group-text" id="inputGroup-sizing-default">Id</span>
        <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="B.Id" />
    </div>
    <button type="button" class="btn btn-danger" @onclick="FindArt">Chercher</button>
</form>
@if (C.Id != 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Titre</th>
                <th>Description</th>
                <th>Statut</th>
                <th>FichierPdf</th>
                <th>ConferenceId</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@C.Id</td>
                <td>@C.Titre</td>
                <td>@C.Description</td>
                <td>@C.Statut</td>
                <td>@C.FichierPdf</td>
                <td>@C.ConferenceId</td>
            </tr>
        </tbody>
    </table>
}

<h3>Liste des Articles</h3>

@if (ListArticles == null || ListArticles.Count == 0)
{
    <p><em>Chargement...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Titre</th>
                <th>Description</th>
                <th>Statut</th>
                <th>FichierPdf</th>
                <th>ConferenceId</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var article in ListArticles)
            {
                <tr>
                    <td>@article.Id</td>
                    <td>@article.Titre</td>
                    <td>@article.Description</td>
                    <td>@article.Statut</td>
                    <td>@article.FichierPdf</td>
                    <td>@article.ConferenceId</td>
                </tr>
            }
        </tbody>
    </table>
}

<form>
    <div class="input-group mb-3">
        <span class="input-group-text" id="inputGroup-sizing-default">Id</span>
        <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="A.Id" />
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="inputGroup-sizing-default">Titre</span>
        <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="A.Titre" />
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="inputGroup-sizing-default">Description</span>
        <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="A.Description" />
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="inputGroup-sizing-default">FichierPdf</span>
        <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="A.FichierPdf" />
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="inputGroup-sizing-default">Statut</span>
        <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="A.Statut" />
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="inputGroup-sizing-default">ConferenceID</span>
        <input type="text" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" @bind="A.ConferenceId" />
    </div>

    <div>
        <button type="button" class="btn btn-danger" @onclick="InsertArt">Insert</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteArt">Delete</button>
        <button type="button" class="btn btn-primary" @onclick="UpdateArticle">Mettre à jour l'article</button>
    </div>
</form>

@code {
    private List<Article> ListArticles = new List<Article>();
    private Article A = new Article();
    private Article B = new Article();
    private Article C = new Article();

    protected override async Task OnInitializedAsync()
    {
        await LoadArticlesAsync();
    }

    private async Task LoadArticlesAsync()
    {
        ListArticles = await ArticleService.GetAllAsync();
    }

    private async Task InsertArt()
    {
        Console.WriteLine("InsertArt method started");

        if (!string.IsNullOrWhiteSpace(A.Titre) && !string.IsNullOrWhiteSpace(A.Description))
        {
            Console.WriteLine("Inserting article: " + A.Titre);
            bool result = await ArticleService.AddAsync(A);
            if (result)
            {
                await LoadArticlesAsync();
                A = new Article();
            }
            else
            {
                // Handle the case when insertion failed
                Console.WriteLine("Failed to insert article.");
            }
        }
        else
        {
            Console.WriteLine("Titre or Description is empty");
        }

        Console.WriteLine("InsertArt method finished");
    }

    private async Task FindArt()
    {
        if (B.Id != 0)
        {
            var b = await ArticleService.GetByIdAsync(B.Id);
            if (b != null)
            {
                C = b;
            }
            B = new Article();
        }
    }

    private async Task DeleteArt()
    {
        Console.WriteLine("DeleteArt method started");

        if (A.Id != 0)
        {
            Console.WriteLine("Deleting article with Id: " + A.Id);
            bool result = await ArticleService.DeleteAsync(A.Id);
            if (result)
            {
                await LoadArticlesAsync();
                A = new Article();
            }
            else
            {
                // Handle the case when deletion failed
                Console.WriteLine("Failed to delete article.");
            }
        }
        else
        {
            Console.WriteLine("Article Id is zero");
        }

        Console.WriteLine("DeleteArt method finished");

        await LoadArticlesAsync();
    }

    private async Task UpdateArticle()
    {
        if (A.Id != 0)
        {
            var existingArticle = await ArticleService.GetByIdAsync(A.Id);

            if (existingArticle != null)
            {
                if (!string.IsNullOrWhiteSpace(A.Titre) && A.Titre != existingArticle.Titre)
                {
                    existingArticle.Titre = A.Titre;
                }

                if (!string.IsNullOrWhiteSpace(A.Description) && A.Description != existingArticle.Description)
                {
                    existingArticle.Description = A.Description;
                }

                if (!string.IsNullOrWhiteSpace(A.Statut) && A.Statut != existingArticle.Statut)
                {
                    existingArticle.Statut = A.Statut;
                }

                if (!string.IsNullOrWhiteSpace(A.FichierPdf) && A.FichierPdf != existingArticle.FichierPdf)
                {
                    existingArticle.FichierPdf = A.FichierPdf;
                }

                if (A.ConferenceId != 0 && A.ConferenceId != existingArticle.ConferenceId)
                {
                    existingArticle.ConferenceId = A.ConferenceId;
                }

                bool result = await ArticleService.UpdateAsync(existingArticle);

                if (result)
                {
                    await LoadArticlesAsync();
                    A = new Article();
                }
                else
                {
                    // Handle the case when update failed
                    Console.WriteLine("Failed to update article.");
                }
            }
            else
            {
                Console.WriteLine("Aucun article correspondant à l'ID trouvé.");
            }
        }
        else
        {
            Console.WriteLine("ID de l'article à mettre à jour est égal à zéro.");
        }
    }
}
